---
import Select from "./Select.astro";
import SelectLikeBox from "./SelectLikeBox.astro";
import { ensureNonNullable } from "~/lib/ensureNonNullable";

interface Props {
  label: string;
  labelSingle: string;
  types: string[] | undefined;
}

const { label, labelSingle, types } = Astro.props;
const isSingleType = types?.length === 1;
const singleType = ensureNonNullable(types?.[0]);
---

<starlight-openapi-content-picker>
  {
    isSingleType ? (
      <SelectLikeBox label={labelSingle}>{singleType}</SelectLikeBox>
    ) : (
      <Select {label} options={types} />
    )
  }

  <slot />
</starlight-openapi-content-picker>

<script>
  customElements.define(
    "starlight-openapi-content-picker",
    class StarlightOpenAPIContentPicker extends HTMLElement {
      #panels: HTMLDivElement[];

      constructor() {
        super();

        const select = this.querySelector<HTMLSelectElement>(":scope > label > select");

        if (select) {
          select.addEventListener("change", (event) => {
            if (event.currentTarget instanceof HTMLSelectElement) {
              this.#changeContent(event.currentTarget.value);
            }
          });
        }

        this.#panels = [...this.querySelectorAll<HTMLDivElement>(':scope > [role="tabpanel"]')];
      }

      #changeContent(mediaType: string) {
        for (const panel of this.#panels) {
          panel.hidden = panel.dataset["openapiContentType"] !== mediaType;
        }
      }
    },
  );
</script>
